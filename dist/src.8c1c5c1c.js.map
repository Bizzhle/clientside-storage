{"version":3,"sources":["index.js"],"names":["db","list","document","querySelector","titleInput","bodyInput","form","submitBtn","addEventListener","e","preventDefault","window","onload","request","indexedDB","open","displayData","firstChild","removeChild","transaction","objectStore","openCursor","onsuccess","cursor","target","result","listItem","createElement","h3","para","appendChild","textContent","value","title","body","setAttribute","id","deleteBtn","onclick","deleteItem","continue","console","log","noteId","Number","parentNode","getAttribute","delete","oncomplete","onerror","onupgradeneeded","createObjectStore","keyPath","autoIncrement","createIndex","unique","onsubmit","addData","newItem","add"],"mappings":";AAEA,IAWIA,EAXEC,EAAOC,SAASC,cAAc,MAC9BC,EAAaF,SAASC,cAAc,UACpCE,EAAYH,SAASC,cAAc,SACnCG,EAAOJ,SAASC,cAAc,QAC9BI,EAAYL,SAASC,cAAc,eAEzCG,EAAKE,iBAAiB,SAAU,SAASC,GACrCA,EAAEC,mBAMNC,OAAOC,OAAS,WACRC,IAAAA,EAAUF,OAAOG,UAAUC,KAAK,WAAY,GAsEvCC,SAAAA,IAGEf,KAAAA,EAAKgB,YACRhB,EAAKiB,YAAYjB,EAAKgB,YAMRjB,EAAGmB,YAAY,YAAYC,YAAY,YAC7CC,aAAaC,UAAY,SAASb,GAEtCc,IAAAA,EAASd,EAAEe,OAAOC,OAGnBF,GAAAA,EAAQ,CAGDG,IAAAA,EAAWxB,SAASyB,cAAc,MAClCC,EAAK1B,SAASyB,cAAc,MAC5BE,EAAO3B,SAASyB,cAAc,KAEpCD,EAASI,YAAYF,GACrBF,EAASI,YAAYD,GACrB5B,EAAK6B,YAAYJ,GAGjBE,EAAGG,YAAcR,EAAOS,MAAMC,MAC9BJ,EAAKE,YAAcR,EAAOS,MAAME,KAIhCR,EAASS,aAAa,eAAgBZ,EAAOS,MAAMI,IAG7CC,IAAAA,EAAYnC,SAASyB,cAAc,UACzCD,EAASI,YAAYO,GACrBA,EAAUN,YAAc,SAIxBM,EAAUC,QAAUC,EAGpBhB,EAAOiB,eACJ,CAEA,IAACvC,EAAKgB,WAAY,CACXS,IAAAA,EAAWxB,SAASyB,cAAc,MACxCD,EAASK,YAAc,mBACvB9B,EAAK6B,YAAYJ,GAGrBe,QAAQC,IAAI,yBAMfH,SAAAA,EAAW9B,GAIZkC,IAAAA,EAASC,OAAOnC,EAAEe,OAAOqB,WAAWC,aAAa,iBAGjD3B,EAAcnB,EAAGmB,YAAY,CAAC,YAAa,aAC7BA,EAAYC,YAAY,YAChB2B,OAAOJ,GAGjCxB,EAAY6B,WAAa,WAOpB,GAJHvC,EAAEe,OAAOqB,WAAWA,WAAW3B,YAAYT,EAAEe,OAAOqB,YACpDJ,QAAQC,IAAI,QAAUC,EAAS,cAG3B1C,EAAKgB,WAAY,CACfS,IAAAA,EAAWxB,SAASyB,cAAc,MACtCD,EAASK,YAAc,mBACvB9B,EAAK6B,YAAYJ,KAtJzBb,EAAQoC,QAAU,WACdR,QAAQC,IAAI,4BAIhB7B,EAAQS,UAAY,WAChBmB,QAAQC,IAAI,gCAGZ1C,EAAKa,EAAQY,OAGbT,KAIJH,EAAQqC,gBAAkB,SAASzC,GAE3BT,IAIAoB,EAJKX,EAAEe,OAAOC,OAIG0B,kBAAkB,WAAY,CAAEC,QAAS,KAAMC,eAAc,IAGlFjC,EAAYkC,YAAY,QAAS,QAAS,CAAEC,QAAQ,IACpDnC,EAAYkC,YAAY,OAAQ,OAAQ,CAAEC,QAAQ,IAElDd,QAAQC,IAAI,4BAIhBpC,EAAKkD,SAEIC,SAAQhD,GACbA,EAAEC,iBAGEgD,IAAAA,EAAU,CAAEzB,MAAO7B,EAAW4B,MAAOE,KAAM7B,EAAU2B,OAGrDb,EAAcnB,EAAGmB,YAAY,CAAC,YAAa,aAG7BA,EAAYC,YAAY,YAGhBuC,IAAID,GACtBpC,UAAY,WAEhBlB,EAAW4B,MAAQ,GACnB3B,EAAU2B,MAAQ,IAItBb,EAAY6B,WAAa,WACrBP,QAAQC,IAAI,0DAGZ1B,KAGJG,EAAY8B,QAAU,WAClBR,QAAQC,IAAI","file":"src.8c1c5c1c.js","sourceRoot":"..\\src","sourcesContent":["// IndexedDB API\r\n// Create needed constants\r\nconst list = document.querySelector('ul');\r\nconst titleInput = document.querySelector('#title');\r\nconst bodyInput = document.querySelector('#body');\r\nconst form = document.querySelector('form');\r\nconst submitBtn = document.querySelector('form button');\r\n\r\nform.addEventListener('submit', function(e) {\r\n    e.preventDefault();\r\n})\r\n\r\n// Create an instance of a db object for us to store the open database in\r\nlet db;\r\n\r\nwindow.onload = function() {\r\n    let request = window.indexedDB.open('notes_db', 1);\r\n    // onerror handler signifies that the database didn't open successfully\r\n    request.onerror = function() {\r\n        console.log('Database failed to open')\r\n    }\r\n\r\n    // onsuccess handler signifies that the database opened successfully\r\n    request.onsuccess = function() {\r\n        console.log('Database opened successfully');\r\n\r\n         // Store the opened database object in the db variable. This is used a lot below\r\n        db = request.result;\r\n\r\n        // Run the displayData() function to display the notes already in the IDB\r\n        displayData();\r\n    };\r\n\r\n    // Setup the database tables if this has not already been done\r\n    request.onupgradeneeded = function(e) {\r\n        // Grab a reference to the opened database\r\n        let db = e.target.result;\r\n\r\n        // Create an objectStore to store our notes in (basically like a single table)\r\n        // including a auto-incrementing key\r\n        let objectStore = db.createObjectStore('notes_os', { keyPath: 'id', autoIncrement:true });\r\n\r\n        // Define what data items the objectStore will contain\r\n        objectStore.createIndex('title', 'title', { unique: false });\r\n        objectStore.createIndex('body', 'body', { unique: false });\r\n\r\n        console.log('Database setup complete');\r\n    },\r\n\r\n    // Create an onsubmit handler so that when the form is submitted the addData() function is run\r\n    form.onsubmit = addData;\r\n\r\n    function addData(e) {\r\n        e.preventDefault();\r\n\r\n        // grab the values entered into the form fields and store them in an object ready for being inserted into the DB\r\n        let newItem = { title: titleInput.value, body: bodyInput.value };\r\n\r\n        // open a read/write db transaction, ready for adding the data\r\n        let transaction = db.transaction(['notes_os'], 'readwrite');\r\n\r\n        // call an object store that's already been added to the database\r\n        let objectStore = transaction.objectStore('notes_os');\r\n\r\n        // Make a request to add our newItem object to the object store\r\n        var request = objectStore.add(newItem);\r\n        request.onsuccess = function() {\r\n            // Clear the form, ready for adding the next entry\r\n            titleInput.value = '';\r\n            bodyInput.value = '';\r\n        };\r\n\r\n        // Report on the success of the transaction completing, when everything is done\r\n        transaction.oncomplete = function() {\r\n            console.log('Transaction completed: database modification finished.');\r\n\r\n            // update the display of data to show the newly added item, by running displayData() again.\r\n            displayData();\r\n        };\r\n\r\n        transaction.onerror = function() {\r\n            console.log('Transaction not opened due to error');\r\n          };\r\n    }\r\n\r\n    // Displaying data\r\n    function displayData() {\r\n        // Here we empty the contents of the list element each time the display is updated\r\n        // If you didn't do this, you'd get duplicates listed each time a new note is added\r\n        while (list.firstChild){\r\n            list.removeChild(list.firstChild);\r\n        }\r\n\r\n        // Open our object store and then get a cursor - which iterates through all the\r\n        // different data items in the store\r\n        \r\n        let objectStore = db.transaction('notes_os').objectStore('notes_os');\r\n        objectStore.openCursor().onsuccess = function(e) {\r\n            // Get a reference to the cursor\r\n            let cursor = e.target.result;\r\n\r\n            // If there is still another data item to iterate through, keep running this code\r\n            if(cursor) {\r\n                // Create a list item, h3, and p to put each data item inside when displaying it\r\n                // structure the HTML fragment, and append it inside the list\r\n                const listItem = document.createElement('li');\r\n                const h3 = document.createElement('h3');\r\n                const para = document.createElement('p');\r\n\r\n                listItem.appendChild(h3);\r\n                listItem.appendChild(para);\r\n                list.appendChild(listItem);\r\n\r\n                // Put the data from the cursor inside the h3 and para\r\n                h3.textContent = cursor.value.title;\r\n                para.textContent = cursor.value.body;\r\n\r\n                // Store the ID of the data item inside an attribute on the listItem, so we know\r\n                // which item it corresponds to. This will be useful later when we want to delete items\r\n                listItem.setAttribute('data-note-id', cursor.value.id);\r\n\r\n                // Create a button and place it inside each listItem\r\n                const deleteBtn = document.createElement('button');\r\n                listItem.appendChild(deleteBtn);\r\n                deleteBtn.textContent = 'Delete';\r\n\r\n                // Set an event handler so that when the button is clicked, the deleteItem()\r\n                // function is run\r\n                deleteBtn.onclick = deleteItem;\r\n\r\n                // Iterate to the next item in the cursor\r\n                cursor.continue();\r\n            } else {\r\n                // Again, if list item is empty, display a 'No notes stored' message\r\n                if(!list.firstChild) {\r\n                    const listItem = document.createElement('li');\r\n                    listItem.textContent = 'No notes stored.';\r\n                    list.appendChild(listItem);\r\n                }\r\n                // if there are no more cursor items to iterate through, say so\r\n                console.log('Notes all displayed');\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    function deleteItem(e) {\r\n        // retrieve the name of the task we want to delete. We need\r\n        // to convert it to a number before trying it use it with IDB; IDB key\r\n        // values are type-sensitive.\r\n        let noteId = Number(e.target.parentNode.getAttribute('data-note-id'));\r\n      \r\n        // open a database transaction and delete the task, finding it using the id we retrieved above\r\n        let transaction = db.transaction(['notes_os'], 'readwrite');\r\n        let objectStore = transaction.objectStore('notes_os');\r\n        let request = objectStore.delete(noteId);\r\n      \r\n        // report that the data item has been deleted\r\n        transaction.oncomplete = function() {\r\n          // delete the parent of the button\r\n          // which is the list item, so it is no longer displayed\r\n          e.target.parentNode.parentNode.removeChild(e.target.parentNode);\r\n          console.log('Note ' + noteId + ' deleted.');\r\n      \r\n          // Again, if list item is empty, display a 'No notes stored' message\r\n          if(!list.firstChild) {\r\n            let listItem = document.createElement('li');\r\n            listItem.textContent = 'No notes stored.';\r\n            list.appendChild(listItem);\r\n          }\r\n        };\r\n      }\r\n    \r\n}\r\n\r\n"]}