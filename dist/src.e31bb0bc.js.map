{"version":3,"sources":["index.js"],"names":["list","document","querySelector","titleInput","bodyInput","form","submitBtn","addEventListener","e","preventDefault","db","window","onload","request","indexedDB","open","onerror","console","log","onsuccess","result","displayData","onupgradeneeded","target","objectStore","createObjectStore","keyPath","autoIncrement","createIndex","unique","onsubmit","addData","newItem","title","value","body","transaction","add","oncomplete","firstChild","removeChild","openCursor","cursor","listItem","createElement","h3","para","appendChild","textContent","setAttribute","id","deleteBtn","onclick","deleteItem","continue","noteId","Number","parentNode","getAttribute","delete"],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["// IndexedDB API\r\n// Create needed constants\r\nconst list = document.querySelector('ul');\r\nconst titleInput = document.querySelector('#title');\r\nconst bodyInput = document.querySelector('#body');\r\nconst form = document.querySelector('form');\r\nconst submitBtn = document.querySelector('form button');\r\n\r\nform.addEventListener('submit', function(e) {\r\n    e.preventDefault();\r\n})\r\n\r\n// Create an instance of a db object for us to store the open database in\r\nlet db;\r\n\r\nwindow.onload = function() {\r\n    let request = window.indexedDB.open('notes_db', 1);\r\n    // onerror handler signifies that the database didn't open successfully\r\n    request.onerror = function() {\r\n        console.log('Database failed to open')\r\n    }\r\n\r\n    // onsuccess handler signifies that the database opened successfully\r\n    request.onsuccess = function() {\r\n        console.log('Database opened successfully');\r\n\r\n         // Store the opened database object in the db variable. This is used a lot below\r\n        db = request.result;\r\n\r\n        // Run the displayData() function to display the notes already in the IDB\r\n        displayData();\r\n    };\r\n\r\n    // Setup the database tables if this has not already been done\r\n    request.onupgradeneeded = function(e) {\r\n        // Grab a reference to the opened database\r\n        let db = e.target.result;\r\n\r\n        // Create an objectStore to store our notes in (basically like a single table)\r\n        // including a auto-incrementing key\r\n        let objectStore = db.createObjectStore('notes_os', { keyPath: 'id', autoIncrement:true });\r\n\r\n        // Define what data items the objectStore will contain\r\n        objectStore.createIndex('title', 'title', { unique: false });\r\n        objectStore.createIndex('body', 'body', { unique: false });\r\n\r\n        console.log('Database setup complete');\r\n    },\r\n\r\n    // Create an onsubmit handler so that when the form is submitted the addData() function is run\r\n    form.onsubmit = addData;\r\n\r\n    function addData(e) {\r\n        e.preventDefault();\r\n\r\n        // grab the values entered into the form fields and store them in an object ready for being inserted into the DB\r\n        let newItem = { title: titleInput.value, body: bodyInput.value };\r\n\r\n        // open a read/write db transaction, ready for adding the data\r\n        let transaction = db.transaction(['notes_os'], 'readwrite');\r\n\r\n        // call an object store that's already been added to the database\r\n        let objectStore = transaction.objectStore('notes_os');\r\n\r\n        // Make a request to add our newItem object to the object store\r\n        var request = objectStore.add(newItem);\r\n        request.onsuccess = function() {\r\n            // Clear the form, ready for adding the next entry\r\n            titleInput.value = '';\r\n            bodyInput.value = '';\r\n        };\r\n\r\n        // Report on the success of the transaction completing, when everything is done\r\n        transaction.oncomplete = function() {\r\n            console.log('Transaction completed: database modification finished.');\r\n\r\n            // update the display of data to show the newly added item, by running displayData() again.\r\n            displayData();\r\n        };\r\n\r\n        transaction.onerror = function() {\r\n            console.log('Transaction not opened due to error');\r\n          };\r\n    }\r\n\r\n    // Displaying data\r\n    function displayData() {\r\n        // Here we empty the contents of the list element each time the display is updated\r\n        // If you didn't do this, you'd get duplicates listed each time a new note is added\r\n        while (list.firstChild){\r\n            list.removeChild(list.firstChild);\r\n        }\r\n\r\n        // Open our object store and then get a cursor - which iterates through all the\r\n        // different data items in the store\r\n        \r\n        let objectStore = db.transaction('notes_os').objectStore('notes_os');\r\n        objectStore.openCursor().onsuccess = function(e) {\r\n            // Get a reference to the cursor\r\n            let cursor = e.target.result;\r\n\r\n            // If there is still another data item to iterate through, keep running this code\r\n            if(cursor) {\r\n                // Create a list item, h3, and p to put each data item inside when displaying it\r\n                // structure the HTML fragment, and append it inside the list\r\n                const listItem = document.createElement('li');\r\n                const h3 = document.createElement('h3');\r\n                const para = document.createElement('p');\r\n\r\n                listItem.appendChild(h3);\r\n                listItem.appendChild(para);\r\n                list.appendChild(listItem);\r\n\r\n                // Put the data from the cursor inside the h3 and para\r\n                h3.textContent = cursor.value.title;\r\n                para.textContent = cursor.value.body;\r\n\r\n                // Store the ID of the data item inside an attribute on the listItem, so we know\r\n                // which item it corresponds to. This will be useful later when we want to delete items\r\n                listItem.setAttribute('data-note-id', cursor.value.id);\r\n\r\n                // Create a button and place it inside each listItem\r\n                const deleteBtn = document.createElement('button');\r\n                listItem.appendChild(deleteBtn);\r\n                deleteBtn.textContent = 'Delete';\r\n\r\n                // Set an event handler so that when the button is clicked, the deleteItem()\r\n                // function is run\r\n                deleteBtn.onclick = deleteItem;\r\n\r\n                // Iterate to the next item in the cursor\r\n                cursor.continue();\r\n            } else {\r\n                // Again, if list item is empty, display a 'No notes stored' message\r\n                if(!list.firstChild) {\r\n                    const listItem = document.createElement('li');\r\n                    listItem.textContent = 'No notes stored.';\r\n                    list.appendChild(listItem);\r\n                }\r\n                // if there are no more cursor items to iterate through, say so\r\n                console.log('Notes all displayed');\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    function deleteItem(e) {\r\n        // retrieve the name of the task we want to delete. We need\r\n        // to convert it to a number before trying it use it with IDB; IDB key\r\n        // values are type-sensitive.\r\n        let noteId = Number(e.target.parentNode.getAttribute('data-note-id'));\r\n      \r\n        // open a database transaction and delete the task, finding it using the id we retrieved above\r\n        let transaction = db.transaction(['notes_os'], 'readwrite');\r\n        let objectStore = transaction.objectStore('notes_os');\r\n        let request = objectStore.delete(noteId);\r\n      \r\n        // report that the data item has been deleted\r\n        transaction.oncomplete = function() {\r\n          // delete the parent of the button\r\n          // which is the list item, so it is no longer displayed\r\n          e.target.parentNode.parentNode.removeChild(e.target.parentNode);\r\n          console.log('Note ' + noteId + ' deleted.');\r\n      \r\n          // Again, if list item is empty, display a 'No notes stored' message\r\n          if(!list.firstChild) {\r\n            let listItem = document.createElement('li');\r\n            listItem.textContent = 'No notes stored.';\r\n            list.appendChild(listItem);\r\n          }\r\n        };\r\n      }\r\n    \r\n}\r\n\r\n"]}